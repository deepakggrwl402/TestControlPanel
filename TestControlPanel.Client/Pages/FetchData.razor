@page "/fetchdata"
@using Refit;
@using Services;
@using System.Diagnostics;
@using TestControlPanel.Models;
@inject HttpClient Http
@inject IWeatherService weatherService
@inject ILogger<FetchData> logger

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private IEnumerable<WeatherForecastViewModel>? forecasts;

    protected override async Task OnInitializedAsync()
    {
        await GetWeatherForecast();
    }

    private async Task GetWeatherForecast()
    {
        try
        {
            var response = await weatherService.GetWeatherForecast();
            if (response != null && response.Succeeded)
            {
                if (response.ResponseCode == Models.Enums.ResponseCode.Success
                    && response.Data != null && response.Data.Any())
                {
                    forecasts = response.Data;
                }
            }
        }
        catch (Exception ex) when (ex is HttpRequestException or ApiException)
        {
            logger.LogError(ex, ex.Message);
        }
        catch (Exception ex)
        {
            logger.LogError(ex, ex.Message);
        }
    }
}
